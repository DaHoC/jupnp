<div class="section" id="section.BinaryLightDebugApp" xmlns="http://www.w3.org/1999/xhtml">
    <div class="title">Debugging and logging</div>
    <div class="content">

        <p>
            Although the binary light is a very simple example, you might run into problems. jUPnP Core
            helps you resolve most problems with extensive logging. Internally, jUPnP Core uses now 
            SLF4J API logging instead of <code>java.util.logging</code>.
        </p>

        <p>
        	SLF4J can be configured according your preferences. 
        </p>

        <p>
            Next you want to configure logging levels for different logging categories. jUPnP Core will
            output some INFO level messages on startup and shutdown, but is otherwise silent during runtime
            unless a problem occurs - it will then log messages at WARNING or SEVERE level.
        </p>

        <p>
            For debugging, usually more detailed logging levels for various log categories are required.
            The logging categories in jUPnP Core are package names, e.g the root logger is available under
            the name <code>org.jupnp</code>. The following tables show typically used categories and the
            recommended level for debugging:
        </p>

        <table class="infotable fullwidth" border="1">
            <thead>
            <tr>
                <th>Network/Transport</th>
                <th class="thirdwidth">&#160;</th>
            </tr>
            </thead>
            <tbody>
            <tr>
                <td class="nowrap">
                    <code>org.jupnp.transport.spi.DatagramIO (TRACE)</code><br/>
                    <code>org.jupnp.transport.spi.MulticastReceiver (TRACE)</code><br/>
                </td>
                <td>UDP communication</td>
            </tr>
            <tr>
                <td class="nowrap">
                    <code>org.jupnp.transport.spi.DatagramProcessor (TRACE)</code><br/>
                </td>
                <td>UDP datagram processing and content</td>
            </tr>
            <tr>
                <td class="nowrap">
                    <code>org.jupnp.transport.spi.UpnpStream (TRACE)</code><br/>
                    <code>org.jupnp.transport.spi.StreamServer (TRACE)</code><br/>
                    <code>org.jupnp.transport.spi.StreamClient (TRACE)</code><br/>
                </td>
                <td>TCP communication</td>
            </tr>
            <tr>
                <td class="nowrap">
                    <code>org.jupnp.transport.spi.SOAPActionProcessor (TRACE)</code><br/>
                </td>
                <td>SOAP action message processing and content</td>
            </tr>
            <tr>
                <td class="nowrap">
                    <code>org.jupnp.transport.spi.GENAEventProcessor (TRACE)</code><br/>
                </td>
                <td>GENA event message processing and content</td>
            </tr>
            <tr>
                <td class="nowrap">
                    <code>org.jupnp.transport.impl.HttpHeaderConverter (TRACE)</code><br/>
                </td>
                <td>HTTP header processing</td>
            </tr>
            </tbody>
        </table>

        <br/>

        <table class="infotable fullwidth" border="1">
            <thead>
            <tr>
                <th>UPnP Protocol</th>
                <th class="thirdwidth">&#160;</th>
            </tr>
            </thead>
            <tbody>
            <tr>
                <td class="nowrap">
                    <code>org.jupnp.protocol.ProtocolFactory (TRACE)</code><br/>
                    <code>org.jupnp.protocol.async (TRACE)</code><br/>
                </td>
                <td>Discovery (Notification &amp; Search)</td>
            </tr>
            <tr>
                <td class="nowrap">
                    <code>org.jupnp.protocol.ProtocolFactory (TRACE)</code><br/>
                    <code>org.jupnp.protocol.RetrieveRemoteDescriptors (TRACE)</code><br/>
                    <code>org.jupnp.protocol.sync.ReceivingRetrieval (TRACE)</code><br/>
                    <code>org.jupnp.binding.xml.DeviceDescriptorBinder (TRACE)</code><br/>
                    <code>org.jupnp.binding.xml.ServiceDescriptorBinder (TRACE)</code><br/>
                </td>
                <td>Description</td>
            </tr>
            <tr>
                <td class="nowrap">
                    <code>org.jupnp.protocol.ProtocolFactory (TRACE)</code><br/>
                    <code>org.jupnp.protocol.sync.ReceivingAction (TRACE)</code><br/>
                    <code>org.jupnp.protocol.sync.SendingAction (TRACE)</code><br/>
                </td>
                <td>Control</td>
            </tr>
            <tr>
                <td class="nowrap">
                    <code>org.jupnp.model.gena (TRACE)</code><br/>
                    <code>org.jupnp.protocol.ProtocolFactory (TRACE)</code><br/>
                    <code>org.jupnp.protocol.sync.ReceivingEvent (TRACE)</code><br/>
                    <code>org.jupnp.protocol.sync.ReceivingSubscribe (TRACE)</code><br/>
                    <code>org.jupnp.protocol.sync.ReceivingUnsubscribe (TRACE)</code><br/>
                    <code>org.jupnp.protocol.sync.SendingEvent (TRACE)</code><br/>
                    <code>org.jupnp.protocol.sync.SendingSubscribe (TRACE)</code><br/>
                    <code>org.jupnp.protocol.sync.SendingUnsubscribe (TRACE)</code><br/>
                    <code>org.jupnp.protocol.sync.SendingRenewal (TRACE)</code><br/>
                </td>
                <td>GENA</td>
            </tr>
            </tbody>
        </table>

        <br/>

        <table class="infotable fullwidth" border="1">
            <thead>
            <tr>
                <th>Core</th>
                <th class="thirdwidth">&#160;</th>
            </tr>
            </thead>
            <tbody>
            <tr>
                <td class="nowrap">
                    <code>org.jupnp.transport.Router (TRACE)</code><br/>
                </td>
                <td>
                    Message Router
                </td>
            </tr>
            <tr>
                <td class="nowrap">
                    <code>org.jupnp.registry.Registry (TRACE)</code><br/>
                    <code>org.jupnp.registry.LocalItems (TRACE)</code><br/>
                    <code>org.jupnp.registry.RemoteItems (TRACE)</code><br/>
                </td>
                <td>Registry</td>
            </tr>
            <tr>
                <td class="nowrap">
                    <code>org.jupnp.binding.annotations (TRACE)</code><br/>
                    <code>org.jupnp.model.meta.LocalService (TRACE)</code><br/>
                    <code>org.jupnp.model.action (TRACE)</code><br/>
                    <code>org.jupnp.model.state (TRACE)</code><br/>
                    <code>org.jupnp.model.DefaultServiceManager (TRACE)</code><br/>
                </td>
                <td>Local service binding &amp; invocation</td>
            </tr>
            <tr>
                <td class="nowrap">
                    <code>org.jupnp.controlpoint (TRACE)</code><br/>
                </td>
                <td>Control Point interaction</td>
            </tr>
            </tbody>
        </table>

        <p>
            One way to configure SLF4J is to use logback with a config file. For example, create
            the following file as <code>logback.xml</code>:
        </p>

        <div><pre><![CDATA[<configuration>

	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<!-- encoders are assigned the type ch.qos.logback.classic.encoder.PatternLayoutEncoder 
			by default -->
		<encoder>
			<pattern>%d{HH:mm:ss.SSS} [%-20thread] %-5level %-70(%logger{36}.%M:%line) - %msg%n
			</pattern>
		</encoder>
	</appender>

	<!--  Extra settings for various categories -->
	<logger name="org.jupnp.protocol" level="TRACE" />
	<logger name="org.jupnp.registry.Registry" level="TRACE" />
	<logger name="org.jupnp.registry.LocalItems" level="TRACE" />
	<logger name="org.jupnp.registry.RemoteItems" level="TRACE" />

	<!--  Extra settings to see on-the-wire traffic -->
	<logger name="org.jupnp.transport.spi.DatagramProcessor" level="TRACE" />
	<logger name="org.jupnp.transport.spi.SOAPActionProcessor" level="TRACE" />

    <!--  default root level -->
	<root level="INFO">
		<appender-ref ref="STDOUT" />
	</root>

</configuration>
]]></pre></div>

        <p>
            You can now start your application with a system property that names your logging
            configuration:
        </p>

        <div><pre><![CDATA[$ java -cp /path/to/seamless-jar-files:/path/to/jupnp-core.jar:classes/ \
        -Djava.util.logging.config.file=/path/to/mylogging.properties \
        example.binaryLight.BinaryLightServer]]></pre></div>

        <p>
            You should see the desired log messages printed on <code>System.out</code>.
        </p>

    </div>
</div>
